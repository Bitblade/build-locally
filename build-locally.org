#+title:    build-locally Org file
#+author:   Brent Goodrick
#+STARTUP:  hideblocks

* Overview

This is the detailed Org mode file to track todo items and design
notes for the build-locally project. Items marked as TODO are yet to
do. See the ./README.md file for end-user usage.

* Definitions

Package: The package being built by the build program defined herein.

Build Program: The script, batch file, or other executable that will
build the package.

Target operating system: The system upon which the package will be built.

* Requirements
** Hard requirements

Any contributor to this project must adhere to the following hard
requirements before being allowed to push commits back to this main
project repo.

*** Non-binary build logic 

Due to security concerns, all files must be in plain-text, ASCII (not
UTF-8 unless mandated by the target operating system) encoding, for
security review.

*** Fully Unattended builds

Fully unattended building means that when a build program is executed,
it does whatever it takes to build that package WITHOUT ANY PROMPTS, such
that the build program can be run in the background and not "hang"
waiting for a response from a user on standard input.

As a consequence, the package being built must be downloadable directly
from the Internet without prompting for login prompts. If special
usernames or passwords are required, then the build program must take
them from command-line arguments.

*** Build Program Interface

Build programs usage should be provided with -h option. The usage must
allow overriding the build directory and installation directory:

#+BEGIN_EXAMPLE

-builddir BUILD_DIR

  Override the BUILD_DIR default, which is $BUILD_DIR.

-installdir INSTALL_DIR

  Override the INSTALL_DIR default, which is $INSTALL_DIR.

#+END_EXAMPLE

** Non-Requirements

Just because a build program exists that implies it works on an
operating system is no guarantee that it will work. Build logic tends
to change over time, and operating systems change as well.

* File and directory structure

"<HEAD>" below means the directory in which this file resides is
located. "<package>" is a name of a package that is to be downloaded.

<HEAD>/support-files: Directory where subfunction files such as
sourceable shell scripts are stored so as to avoid file duplication.

<HEAD>/<package>: Where the build program files for the given <package> are
located.

One or more of the following may exist for a given <package>:

<HEAD>/<package>/<platform>/build.<ext>: A build program written in
some scripting language given by <ext> and intended be built on any
flavor of <platform>. This requires that the scripting language given
by <ext> must be installed by default on the given <platform>. This
program both builds and installs the package.

** Extensions:

<ext> can be one of:

bash: Bash shell scripts.
sh: Bourne shell scripts.
bat: Microsoft Windows DOS command files.
js: Microsoft Windows JScript command files.

** Platforms

<platform> can be one of:

linux: Any version of Linux
mswindows: Any version of Microsoft Windows

More platforms can be added when the need arises (via GitHub forking
and submitting changes).

** Subpackage Nomenclature

If a package A has an add-on, or subcomponent, or subpackage called
package B, then the naming of the <package> name will be
A--B. Building package A--B implies that package A is a prerequisite
to building A--B.  By extension, if package A--B has a subpackage C
then the package name will be A--B--C.  The double dashes are to
handle cases where the real package name contains dashes (e.g., the
jira-python package that is to be installed into a Python
installation is thus given a name of python--jira-python).

** Versions

Little to no provision for versions is defined, so the build-locally
package just downloads and installs the latest stable version of the
specified package.  If more is needed then the approach taken by
python--pip and others will be considered, notably the requirements
files that bundle up a fabric of version metadata to be installed as a
bundle.

* Relative referencing

All build programs should be able to refer to, and build, dependent
package by way of relative file reference. This typically requires the
full build-locally project to be checked out.

